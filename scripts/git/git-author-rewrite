#!/usr/bin/env bash

# Unoffical Bash "strict mode"
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
#ORIGINAL_IFS=$IFS
IFS=$'\t\n' # Stricter IFS settings

# Resources I used when developing this:
#
# * https://stackoverflow.com/questions/4981126/how-to-amend-several-commits-in-git-to-change-author
# * https://stackoverflow.com/a/25815116/1245380
# * https://help.github.com/articles/changing-author-info/

usage() {
    cat <<EOF
    Usage: git-author-rewrite [options]

    Rewrites existing Git commits with new committer and author information.

    Options:
    --old           The old email address you want to replace
    --new-email     The new email address to use
    --new-name      The new name to use
    --after-commit  Only update commits on current branch that come after this
                    commit hash.
EOF
}


error_exit() {
    usage
    exit 1
}

get_value() {
    first=${1#*=}
    second=$2

    # TODO: Use sed to parse the arguments?
    #export OUTPUT=`echo $1 | sed -e 's/^[^=]*=//g'`
    if [ -z "$first" ]; then
        if [[ $second == "-*" ]]; then
            echo ""
        else
            echo $second
        fi
    else
        echo $first
    fi
}

COMMIT_HASH=""

while :; do
    case ${1:-} in
        -h|-\?|--help)
            usage
            exit
            ;;
        -o|--old|--old=*)
            OLD_EMAIL=$(get_value $1 ${2-""})
            ;;
        -n|--new-email|--new-email=*)
            CORRECT_EMAIL=$(get_value $1 ${2:-""})
            ;;
        -a|--new-name|--new-name=*)
            CORRECT_NAME=$(get_value $1 ${2:-""})
            ;;
        -c|--after-commit|--after-commit=*)
            COMMIT_HASH=$(get_value $1 ${2:-""})
            ;;
        --)
            shift
            break
            ;;
        *)
            if [ -z "${1:-}" ]; then
                break
            else
                echo "Unknown option ${1:-}"
                error_exit
            fi
    esac

    shift
done

# Use $COMMIT_HASH if set to do a rebase on a specific set of commits after
# the given hash to rewrite committer and author
if [ -z "$COMMIT_HASH" ]; then
    export OLD_EMAIL
    export CORRECT_EMAIL
    export CORRECT_NAME

    git filter-branch --env-filter '
    if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]
    then
        echo "Fixed committer info"
        export GIT_COMMITTER_NAME="$CORRECT_NAME"
        export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"
    fi
    if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]
    then
        echo "Fixed author info"
        export GIT_AUTHOR_NAME="$CORRECT_NAME"
        export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL"
    fi
    ' --tag-name-filter cat -- --branches --tags
else
    git rebase -i "$COMMIT_HASH" -x "git commit --amend --author '$GIT_AUTHOR_NAME <$GIT_AUTHOR_EMAIL>' --committer '$GIT_COMMITTER_NAME <$GIT_COMMITTER_EMAIL>' -CHEAD"
fi
